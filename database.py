from models import db, User, LinkedInProfile, GeneratedContent, Prospect, UsageStats
from datetime import datetime, timedelta, date
import random
import json

def create_tables():
    """Create all database tables"""
    try:
        db.create_all()
        print("‚úÖ Database tables created successfully!")
    except Exception as e:
        print(f"‚ùå Error creating tables: {e}")
        return False
    return True

def seed_sample_data():
    """Create sample data for testing"""
    
    # Sample user emails for testing
    sample_emails = [
        'john.doe@example.com',
        'sarah.smith@company.com', 
        'mike.johnson@startup.io',
        'lisa.brown@agency.com',
        'david.wilson@freelance.com'
    ]
    
    # Sample industries
    industries = ['Technology', 'Marketing', 'Sales', 'Design', 'Finance', 'Consulting']
    
    # Sample companies  
    companies = ['Tech Corp', 'Design Studio', 'Marketing Agency', 'StartupXYZ', 'Consulting Group']
    
    # Sample skills
    skills_pool = [
        'Python', 'JavaScript', 'Project Management', 'Digital Marketing', 
        'Sales Strategy', 'UI/UX Design', 'Data Analysis', 'Content Creation',
        'Leadership', 'Communication', 'Strategy', 'Business Development'
    ]
    
    print("üå± Seeding sample data...")
    
    for i, email in enumerate(sample_emails):
        # Check if user already exists
        existing_user = User.query.filter_by(email=email).first()
        if existing_user:
            continue
            
        # Create user
        user = User(
            email=email,
            subscription_status='trial' if i < 3 else 'pro',
            trial_ends_at=datetime.utcnow() + timedelta(days=random.randint(5, 14)),
            linkedin_profile_url=f'https://linkedin.com/in/{email.split("@")[0].replace(".", "")}',
            last_login=datetime.utcnow() - timedelta(hours=random.randint(1, 48))
        )
        db.session.add(user)
        db.session.flush()  # Get the user ID
        
        # Create LinkedIn profile
        profile = LinkedInProfile(
            user_id=user.id,
            headline=f"{random.choice(['Senior', 'Lead', 'Expert', 'Specialist'])} {random.choice(['Developer', 'Designer', 'Marketer', 'Consultant', 'Manager'])} | Helping companies grow",
            about_section=f"Passionate {random.choice(industries).lower()} professional with 5+ years of experience. I help companies achieve their goals through innovative solutions and strategic thinking. Let's connect and explore opportunities together!",
            current_position=f"{random.choice(['Senior', 'Lead', 'Principal'])} {random.choice(['Developer', 'Designer', 'Manager', 'Specialist'])}",
            company=random.choice(companies),
            industry=random.choice(industries),
            location=random.choice(['New York, NY', 'San Francisco, CA', 'London, UK', 'Toronto, ON', 'Remote']),
            connections_count=random.randint(500, 5000),
            last_updated=datetime.utcnow()
        )
        
        # Set skills
        user_skills = random.sample(skills_pool, random.randint(5, 8))
        profile.set_skills_list(user_skills)
        
        # Set experience
        experience = [
            {
                'title': profile.current_position,
                'company': profile.company,
                'duration': '2021 - Present',
                'description': 'Leading strategic initiatives and driving growth through innovative solutions.'
            },
            {
                'title': f"Junior {random.choice(['Developer', 'Designer', 'Analyst', 'Coordinator'])}",
                'company': random.choice(companies),
                'duration': '2019 - 2021', 
                'description': 'Gained valuable experience in project management and team collaboration.'
            }
        ]
        profile.set_experience_list(experience)
        
        db.session.add(profile)
        
        # Create sample generated content
        content_types = ['post', 'headline', 'about']
        for j in range(random.randint(3, 8)):
            content = GeneratedContent(
                user_id=user.id,
                content_type=random.choice(content_types),
                content_text=f"Sample {random.choice(content_types)} content generated by AI for {profile.industry} industry. This is placeholder content for testing purposes.",
                industry=profile.industry,
                tone=random.choice(['Professional', 'Friendly', 'Authoritative', 'Conversational']),
                topic=random.choice(['Industry Trends', 'Professional Growth', 'Team Leadership', 'Innovation']),
                used=random.choice([True, False]),
                rating=random.randint(3, 5) if random.choice([True, False]) else None
            )
            db.session.add(content)
        
        # Create sample prospects
        prospect_names = [
            'Alex Thompson', 'Jessica Chen', 'Robert Martinez', 'Emily Davis', 
            'Michael Brown', 'Rachel Green', 'Chris Taylor', 'Amanda Johnson'
        ]
        
        for k in range(random.randint(5, 12)):
            if k < len(prospect_names):
                prospect = Prospect(
                    user_id=user.id,
                    name=prospect_names[k],
                    position=f"{random.choice(['VP', 'Director', 'Manager', 'Senior'])} of {random.choice(['Sales', 'Marketing', 'Operations', 'Strategy'])}",
                    company=random.choice(companies),
                    industry=random.choice(industries),
                    linkedin_url=f"https://linkedin.com/in/{prospect_names[k].lower().replace(' ', '')}",
                    engagement_score=random.randint(1, 10),
                    last_interaction=random.choice(['Liked your post', 'Viewed your profile', 'Sent connection request', 'Replied to message']),
                    interaction_date=datetime.utcnow() - timedelta(days=random.randint(1, 30)),
                    status=random.choice(['identified', 'contacted', 'replied']),
                    notes=f"Met at industry conference. Interested in {random.choice(['collaboration', 'consulting services', 'partnership opportunities'])}"
                )
                db.session.add(prospect)
        
        # Create usage stats for last 7 days
        for day in range(7):
            stat_date = date.today() - timedelta(days=day)
            stats = UsageStats(
                user_id=user.id,
                date=stat_date,
                profile_views=random.randint(10, 50),
                search_appearances=random.randint(5, 25),
                post_impressions=random.randint(100, 1000),
                post_engagement=random.randint(10, 100),
                connections_added=random.randint(0, 5),
                messages_sent=random.randint(0, 10),
                ai_generations_used=random.randint(1, 8)
            )
            db.session.add(stats)
    
    # Commit all changes
    try:
        db.session.commit()
        print("‚úÖ Sample data created successfully!")
        print(f"üìä Created {len(sample_emails)} users with profiles, content, prospects, and stats")
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Error creating sample data: {e}")

def get_user_stats(user_id):
    """Get aggregated stats for a user"""
    latest_stats = UsageStats.query.filter_by(user_id=user_id).order_by(UsageStats.date.desc()).first()
    
    if not latest_stats:
        return {
            'profile_views': 0,
            'post_engagement': 0,
            'connections_added': 0,
            'messages_sent': 0
        }
    
    # Get weekly totals
    week_ago = date.today() - timedelta(days=7)
    weekly_stats = db.session.query(
        db.func.sum(UsageStats.profile_views).label('profile_views'),
        db.func.sum(UsageStats.post_engagement).label('engagement'),
        db.func.sum(UsageStats.connections_added).label('connections'),
        db.func.sum(UsageStats.messages_sent).label('messages')
    ).filter(
        UsageStats.user_id == user_id,
        UsageStats.date >= week_ago
    ).first()
    
    return {
        'profile_views': weekly_stats.profile_views or 0,
        'engagement_rate': f"{random.uniform(5.0, 12.0):.1f}%",  # Calculated rate
        'connections_added': weekly_stats.connections or 0,
        'messages_sent': weekly_stats.messages or 0
    }

def get_user_by_email(email):
    """Get user by email with related data"""
    return User.query.filter_by(email=email).first()

def create_or_update_user(email):
    """Create new user or update last login"""
    user = get_user_by_email(email)
    
    if not user:
        user = User(
            email=email,
            last_login=datetime.utcnow()
        )
        db.session.add(user)
        db.session.commit()
        print(f"‚úÖ Created new user: {email}")
    else:
        user.last_login = datetime.utcnow()
        db.session.commit()
        print(f"‚úÖ Updated login for user: {email}")
    
    return user
